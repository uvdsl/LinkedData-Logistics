###################
### version 0.1 ###
###################


Preliminaries:
	Have a Ethereum node to connect to, e.g. geth.
	Have a Webserver, where you can publish the rdf documents from the data folder, especially the profiles and products (cat and s).
	Have Inbox-Server for your participants, e.g. the in readme mentioned LDBBC.
	Have a Linked Data hasher online, e.g. the in readme mentioned LDH.
	Have an instance of the Linked Data Chain Agent (LDCA) running, e.g. via Docker.
	
Important:
	You have to edit the RDF profiles to fit your deployment environment, i.e. the URIs of your inboxes and hasher and ethereum node!
	These properties have to be correct, otherwise you won't be able to log in with that profile!
	
Now, if you access your LDCA in your Browser, you will be welcomed by a login screen that asks for a profile URI. 
Type in the URI where your edited RDF profile (e.g. the fisher's at your webserver) is availble.
If the profile accessible via the URI you just provided suffices the requirements needed to operate correctly, you will see a standard messenger layout. That's nothing to snooze at!

Troubleshooting:
	If you can't login, CORS issues may be present or the profiles have an issue. Check the URIs! Otherwise inspect the error messages in the browser (ctrl + shift + i).
	If you just try "fisher", that won't work, that is just a demo shortcut ;-)


Let's walk through our use case, shall we?

### Role: Fisherman

Referencing the example from the paper, we are now the fisher who hands over the caugth fish to the trucker.
Login with the fisher's profile URI. We will now create the documentation (i.e. the initial Linked Pedigree part) and store its hash on the blockchain:
Click on the blue speed-dial in the bottom righthand corner (Tool tip: "Create a new Linked Pedigree!")
Edit the object URI and the target URI to match your environment! (The defaults are again shortcuts from our demo.)
Now, simply click the Create-Button!
Provide the correct wallet password (for the fisher it is "fisher". You can guess what it is for the trucker, eh?)
When the progress bar disappears, everything is done!

Further explanation - what actually happens in the background:
	A new initial Linked Pedigree part is automatically generated that includes the information about the product and the receiving party and links to some more information.
	This transfer documentation, i.e. this Linked Pedigree part (LPP), is then automatically stored in the fisher's "docbox", such that it can be looked up by its URI.
	Then, this LPP is put through the Linked Data hasher and the hash is received.
	This hash of the documentation is then provided to the Smart Contract on the blockchain and the digital ownership of the item is offered to the trucker, also on the blockchain!
	The transactions is carried out with the fisher's credentials. 
	It takes a few seconds for the miner to include the transaction in a block.
	Once the transactions is mined successfully, the agent issues a notification called a "Linked Offer" to the trucker's inbox (looked up via the receiving target's profile URI).
	Now the trucker has a message about an item waiting for him (digitally and in real world).
	
	
Congratulations:
	+ you created and published the initial Linked Pedigree part, i.e. the transfer documentation 
	+ you stored its hash on the blockchain and offered the digital ownership to the trucker
	+ you notified the trucker about the item waiting for him


### Role: Trucker
Now, just refresh the LDCA. It will take you to the login screen. Log in using the trucker's profile URI.
You will see, that you have a message from the fisher about that item you (as the fisher) just offered!
When you click on the message, informations about that offer are displayed on the right hand side of the screen:
	* The URI of the associated Linked Pedigree part (LPP), i.e. the transfer documentation at hand. (You can look up what has been previously generated here!)
	* The hash of that LPP, which was just looked up from the fisher's docbox/webserver
	* A checkbox indicating if the hash of the just fetched LPP matches the hash stored on the blockchain, i.e. verification of the documentation 
	* the approval status of the offer
	* the previous part of the documentation (which says "initial" here, since this is the initial part of the documentation for the fish that is offered by the fisher to the trucker)
If everything looks fine to you, you can accept this offer by hitting the Approve-button. Otherwise reject this offer by hitting the Reject-Button. 
Assuming you accepted the offer, you will be asked for your wallet credentials in order to store your accept/approval of the transfer on the blockchain.
Then the offer vanishes and a new message appears in your inbox, now with a check mark on it. 
In the background, the Linked Data notification is modified in order to reflect your acceptance of the offer.
This indicates a accepted item and - at the same time - a documentation you can extend.

Congratulations:
	+ you approved the initial Linked Pedigree part!
	+ you now own this item!
 
But, what does that mean, to extend the documentation?
You as the trucker bring the fish now to a market. The transfer from you to that market also needs to be documented. 
To make the history of the fish transparent, this new documentation, i.e. the next LPP, references the previous transfer, namely the one from the fisher to the trucker.
So, when the trucker wants to transfer the item to another party, e.g. to a market, the new documentation includes a link to the previous documentation, i.e. the inital LPP.
This "previous part link" is also stored on the blockchain to make it verifiable.

So, when you hit the Extend-button, you need to put in the market's RDF profile URI. Then enter the trucker's wallet password "trucker".

Further explanation - what actually happens in the background:
	Again, a new Linked Pedigree part is automatically generated that includes the information about the product and the receiving party and links to some more information.
	This time, a additional "previous part link" is included, that references the previous LPP, i.e. the initial one.
	This new LPP, i.e. this transfer documentation, is then automatically stored in the trucker's "docbox", such that it can be looked up by its URI.
	Then, this LPP is put through the Linked Data hasher and the hash is received.
	This hash of the documentation and the "previous part link" are then provided to the Smart Contract on the blockchain and the digital ownership of the item is offered to the trucker, also on the blockchain!
	The transactions is carried out with the trucker's credentials. 
	It takes a few seconds for the miner to include the transaction in a block.
	Once the transactions is mined successfully, the agent issues a "Linked Offer" to the market's inbox (looked up via the receiving target's profile URI).
	Now the market has a message about an item waiting for him (digitally and in real world).

Remember:
	You must have the ethereum node as well as the miner running!


### Continue

You can now continue the example:
	-> switch roles to the market
	-> when you click on the Linked Offer, you will now see that there are two parts!
		The top one being the new LPP, the transfer documentation from the trucker to the market,
		the bottom one the referenced LPP, the transfer documentation from the fisher to the trucker!
	-> Again hashes should be checked, and, for the top part, it should say the initial LPP's URI as previous part!
	-> Approve the trucker's Linked Pedigree part by accepting the Linked Offer or reject it.
	-> You can even extend this documentation now back to the trucker or any other profile you have in your (social) business network!


Feel free to play around and see how you can trace back the steps the item takes!


### Known Ethereum Wallets:

		path 		 					| password	| 		address
--------------------------------------- |-----------|-------------------------------------------
ethereum/keystore/fisherWallet.json 	| fisher  	| 0xfc3de79f7658f635513c42eff9f120e72d2b5f1a
ethereum/keystore/truckerWallet.json 	| trucker  	| 0xa578f64d2bea4e738b5f9314782b769dbab5a3dc
ethereum/keystore/marketWallet.json 	| market  	| 0x42ee24e8af4091779869f476ba3774daf4657876
ethereum/keystore/consumerWallet.json 	| consumer 	| 0x4caac15568ea56cd9f53e91690957ffe9252f8f0

Found a Bug?
If you play around a little, you will find, that the implementation of the Smart Contract may not satisfy your needs. This code should not be deployed in a real business environment without review, rather, it can be used as a template to develop a robust and to your use case applicable Smart Contract.

Contact me, if you want discuss anything :)